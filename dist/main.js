(()=>{"use strict";var i={717:(i,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Bag=void 0;class s{constructor(){this.nextMinos=[],this.nextMinos.push(...this.generateNextMinos(),...this.generateNextMinos())}generateNextMinos(){const i=[...s.minoTypes],t=[];for(;0!==i.length;)t.push(i.splice(Math.floor(Math.random()*i.length),1)[0]);return t}shiftNext(){this.nextMinos.length<8&&this.nextMinos.push(...this.generateNextMinos());const i=this.nextMinos[0];return this.nextMinos.shift(),i}}t.Bag=s,s.minoTypes=["i","o","t","s","z","l","j"]},139:(i,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Board=void 0,t.Board=class{constructor(){this.width=10,this.height=40;const i=[];for(let t=0;t<this.height;t++){const t=[];for(let i=0;i<this.width;i++)t.push("");i.push(t)}this.board=i}isBlock(i,t){return i<0||t<0||this.width<=i||this.height<=t||""!==this.board[t][i]}findOverlapingBlocks(i){let t=!1;for(let s=0;s<i.length;s++){const e=i[s];if(this.isBlock(e[0],e[1])){t=!0;break}}return t}fill(i,t){for(let s=0;s<i.length;s++){const e=i[s];this.board[e[1]][e[0]]=t}}}},812:(i,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Control=void 0,t.Control=class{constructor(i,t,s,e,o){this.pressingRight=!1,this.pressingLeft=!1,this.pressingDown=!1,this.waitFrames=0,this.freeFall=60,this.lockDownTimer=30,this.waitinglockDown=!1,this.lockDownCount=15,this.currentLowestHeight=0,this.moveDirection="idle",this.ARR=i,this.DAS=t,this.DCD=s,this.SDF=e,this.remainingDAS=this.DAS,this.remainingARR=this.ARR,this.remainingDCD=0,this.remainingFreeFall=this.freeFall,this.remaininglockDownCount=this.lockDownCount,this.waitinglockDown=!1,this.GM=o}controlLoop(){setTimeout((()=>{this.GM.gameRunning&&(0<this.waitFrames?this.waitFrames--:(this.pressingRight||this.pressingLeft?(this.pressingRight&&!this.pressingLeft&&"right"!==this.moveDirection?(this.moveDirection="right",this.moveMinoHorizontally()):!this.pressingRight&&this.pressingLeft&&"left"!==this.moveDirection&&(this.moveDirection="left",this.moveMinoHorizontally()),0<this.remainingDCD?this.remainingDCD--:0<this.remainingDAS?this.remainingDAS--:0<this.remainingARR?this.remainingARR--:(this.moveMinoHorizontally(),this.remainingARR=this.ARR)):(this.remainingDAS=this.DAS,this.remainingARR=this.ARR,this.moveDirection="idle"),this.pressingDown&&!this.waitinglockDown?this.remainingFreeFall-=this.SDF:this.remainingFreeFall--,this.remainingFreeFall<=0&&(this.GM.currentMino.softdrop(this.pressingDown)?(this.GM.currentMino.softDroppable?(this.remainingFreeFall=this.freeFall,this.waitinglockDown=!1):this.remaininglockDownCount<=0?this.lockAndNextTurn():(this.remainingFreeFall=this.lockDownTimer,this.waitinglockDown=!0),this.GM.currentMino.y<this.currentLowestHeight&&(this.currentLowestHeight=this.GM.currentMino.y,this.remaininglockDownCount=this.lockDownCount)):this.lockAndNextTurn())),this.GM.controlLoopedCount++),this.controlLoop()}),1e3/60)}lockAndNextTurn(){this.GM.gameRunning&&(this.remainingDAS=this.DAS,this.remainingARR=this.ARR,this.remainingDCD=this.DCD,this.remainingFreeFall=this.freeFall,this.remaininglockDownCount=this.lockDownCount,this.waitinglockDown=!1,this.GM.turn.nextTurn())}moveMinoHorizontally(){this.GM.gameRunning&&"idle"!==this.moveDirection&&this.GM.currentMino.moveHorizontally(this.moveDirection)&&(this.remaininglockDownCount--,this.GM.currentMino.softDroppable?this.waitinglockDown=!1:(this.remainingFreeFall=this.lockDownTimer,this.waitinglockDown=!0))}rotateClockwise(){this.GM.gameRunning&&this.GM.currentMino.rotate("clockwise")&&(this.remaininglockDownCount--,this.GM.currentMino.softDroppable?this.waitinglockDown=!1:(this.remainingFreeFall=this.lockDownTimer,this.waitinglockDown=!0))}rotateCounterclockwise(){this.GM.gameRunning&&this.GM.currentMino.rotate("counterclockwise")&&(this.remaininglockDownCount--,this.GM.currentMino.softDroppable?this.waitinglockDown=!1:(this.remainingFreeFall=this.lockDownTimer,this.waitinglockDown=!0))}holdKey(){this.GM.gameRunning&&this.GM.useHold()}harddropKey(){this.GM.gameRunning&&(this.remainingDCD=this.DCD,this.GM.currentMino.harddrop(),this.lockAndNextTurn())}rightKeyDown(){this.GM.gameRunning&&(this.pressingRight=!0,"idle"===this.moveDirection?(this.moveDirection="right",this.moveMinoHorizontally()):this.moveDirection="right")}rightKeyUp(){this.GM.gameRunning&&(this.pressingRight=!1)}leftKeyDown(){this.GM.gameRunning&&(this.pressingLeft=!0,"idle"===this.moveDirection?(this.moveDirection="left",this.moveMinoHorizontally()):this.moveDirection="left")}leftKeyUp(){this.GM.gameRunning&&(this.pressingLeft=!1)}downKeyDown(){this.GM.gameRunning&&(this.pressingDown=!0)}downKeyUp(){this.GM.gameRunning&&(this.pressingDown=!1)}}},70:(i,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Gamemaster=void 0;const e=s(139),o=s(812),n=s(904),r=s(298);class h extends e.Board{constructor(){super(),this.scoreList={softdrop:2,single:100,double:300,triple:500,tetris:800,tspin:400,tspinSingle:800,tspinDouble:1200,tspinTriple:1600,renDefault:50,renMax:1e3,perfectClearSingle:800,perfectClearDouble:1e3,perfectClearTriple:1800,perfectClearTetris:2e3,tspinMini:100,backToBack:1.5},this.gameRunning=!1,this.startTime=0,this.controlLoopedCount=0,this.score=0,this.clearedLines=0,this.ren=0,this.backToBack=!1,this.holdMino="none",this.previousMinoByHold=new n.Mino("t",this),this.damageAmountArray=[],this.control=new o.Control(2,9,2,20,this),this.turn=new r.Turn(this),this.currentMino=this.createMino(this.turn.nextMinos[0])}createMino(i){return new n.Mino(i,this)}changeCurrentMino(i){this.currentMino=i,this.control.currentLowestHeight=i.y}useHold(){if(this.previousMinoByHold!==this.currentMino&&this.gameRunning){const i=this.holdMino;let t;return this.holdMino=this.currentMino.minoType,t="none"===i?this.createMino(this.turn.shiftNext()):this.createMino(i),this.changeCurrentMino(t),this.previousMinoByHold=t,!0}return!1}start(){0===this.startTime&&(this.startTime=Date.now(),this.changeCurrentMino(this.createMino(this.turn.shiftNext())),this.gameRunning=!0,this.control.controlLoop())}pause(){this.gameRunning=!1}unpause(){this.gameRunning=!0}gameover(){this.gameRunning&&(this.gameRunning=!1)}increaseScore(i){this.gameRunning&&(this.score+=i)}event(i){}}t.Gamemaster=h},904:(i,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Mino=void 0;class s{static getIMinoShapes(i){return this.iMinoShapes[i].map((i=>[...i]))}get myPosition(){return this.blocksCoordinates.map((i=>[i[0]+this.x,i[1]+this.y]))}constructor(i,t){switch(this.x=0,this.y=0,this.minoDirection=0,this.blocksCoordinates=[[0,0],[0,0],[0,0],[0,0]],this.locked=!1,this.tspin=!1,this.tspinMini=!1,this.minoType=i,this.GM=t,i){case"i":this.x=4,this.y=20,this.blocksCoordinates=s.getIMinoShapes(this.minoDirection);break;case"o":this.x=4,this.y=21,this.blocksCoordinates=[[0,0],[1,0],[0,-1],[1,-1]];break;case"t":this.x=4,this.y=20,this.blocksCoordinates=[[0,1],[-1,0],[0,0],[1,0]];break;case"s":this.x=4,this.y=20,this.blocksCoordinates=[[1,1],[0,1],[-1,0],[0,0]];break;case"z":this.x=4,this.y=20,this.blocksCoordinates=[[-1,1],[0,1],[0,0],[1,0]];break;case"l":this.x=4,this.y=20,this.blocksCoordinates=[[1,1],[-1,0],[0,0],[1,0]];break;case"j":this.x=4,this.y=20,this.blocksCoordinates=[[-1,1],[-1,0],[0,0],[1,0]]}}useSRS(i,t,e,o,n){const r=i.map((i=>[...i]));if("i"===t)for(let i=0;i<r.length;i++){const t=r[i],h=s.minokick.i[n][o][e];t[0]+=h[0],t[1]+=h[1]}else for(let i=0;i<r.length;i++){const t=r[i],h=s.minokick.jlstz[n][o][e];t[0]+=h[0],t[1]+=h[1]}return r}rotate(i){let t,e=this.minoDirection+("clockwise"===i?1:-1);t=e>3?0:e<0||3===e?3:2===e?2:1===e?1:0;let o=[[0,0],[0,0],[0,0],[0,0]],n=[[0,0],[0,0],[0,0],[0,0]];switch(this.minoType){case"i":o=s.getIMinoShapes(t),n=o.map((i=>[this.x+i[0],this.y+i[1]]));break;case"o":o=this.blocksCoordinates,n=o.map((i=>[this.x+i[0],this.y+i[1]]));break;default:if("clockwise"===i)for(let i=0;i<this.blocksCoordinates.length;i++){const t=this.blocksCoordinates[i];o[i][0]=t[1],o[i][1]=-t[0],n[i][0]=o[i][0]+this.x,n[i][1]=o[i][1]+this.y}else for(let i=0;i<this.blocksCoordinates.length;i++){const t=this.blocksCoordinates[i];o[i][0]=-t[1],o[i][1]=t[0],n[i][0]=o[i][0]+this.x,n[i][1]=o[i][1]+this.y}}let r=0,h=n;for(;r<4&&this.GM.findOverlapingBlocks(h);)h=this.useSRS(n,this.minoType,this.minoDirection,i,r),r++;if(this.GM.findOverlapingBlocks(h))return!1;if(this.minoDirection=t,this.x=this.x+(h[0][0]-n[0][0]),this.y=this.y+(h[0][1]-n[0][1]),this.blocksCoordinates=o,this.tspin=!1,this.tspinMini=!1,"t"===this.minoType){let i=0;this.GM.isBlock(this.x-1,this.y-1)&&i++,this.GM.isBlock(this.x+1,this.y-1)&&i++,this.GM.isBlock(this.x+1,this.y+1)&&i++,this.GM.isBlock(this.x-1,this.y+1)&&i++,this.tspin=2<i,this.tspin&&4!==r&&(0===this.minoDirection?this.GM.isBlock(this.x-1,this.y+1)&&this.GM.isBlock(this.x+1,this.y+1)||(this.tspinMini=!0):1===this.minoDirection?this.GM.isBlock(this.x+1,this.y+1)&&this.GM.isBlock(this.x+1,this.y-1)||(this.tspinMini=!0):2===this.minoDirection?this.GM.isBlock(this.x-1,this.y-1)&&this.GM.isBlock(this.x+1,this.y-1)||(this.tspinMini=!0):3===this.minoDirection&&(this.GM.isBlock(this.x-1,this.y+1)&&this.GM.isBlock(this.x-1,this.y-1)||(this.tspinMini=!0)))}return!0}moveHorizontally(i){const t=this.x+("left"===i?-1:1);return!!this.testMoving(t,this.y)&&(this.x=t,this.tspin=!1,this.tspinMini=!1,!0)}softdrop(i=!0){return!!this.softDroppable&&(this.y--,this.tspin=!1,this.tspinMini=!1,i&&this.GM.increaseScore(this.GM.scoreList.softdrop),!0)}harddrop(){let i=!0;for(;i;)i=this.softdrop();return!0}getAbsoluteCoordinates(i,t){const s=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<this.blocksCoordinates.length;e++)s[e][0]=i+this.blocksCoordinates[e][0],s[e][1]=t+this.blocksCoordinates[e][1];return s}testMoving(i,t){const s=this.getAbsoluteCoordinates(i,t);return!this.GM.findOverlapingBlocks(s)}get softDroppable(){return this.testMoving(this.x,this.y-1)}get shadowPosition(){let i=this.y-1;for(;this.testMoving(this.x,i);)i--;return this.getAbsoluteCoordinates(this.x,i)}}t.Mino=s,s.minokick={jlstz:[{clockwise:[[-1,0],[1,0],[1,0],[-1,0]],counterclockwise:[[1,0],[1,0],[-1,0],[-1,0]]},{clockwise:[[-1,1],[1,-1],[1,1],[-1,-1]],counterclockwise:[[1,1],[1,-1],[-1,1],[-1,-1]]},{clockwise:[[0,-2],[0,2],[0,-2],[0,2]],counterclockwise:[[0,-2],[0,2],[0,-2],[0,2]]},{clockwise:[[-1,-2],[1,2],[1,-2],[-1,2]],counterclockwise:[[1,-2],[1,2],[-1,-2],[-1,2]]}],i:[{clockwise:[[-2,0],[-1,0],[2,0],[1,0]],counterclockwise:[[-1,0],[2,0],[1,0],[-2,0]]},{clockwise:[[1,0],[2,0],[-1,0],[-1,0]],counterclockwise:[[2,0],[-1,0],[-2,0],[1,0]]},{clockwise:[[-2,-1],[-1,2],[2,1],[1,-2]],counterclockwise:[[-1,2],[2,1],[1,-2],[-2,-1]]},{clockwise:[[1,2],[2,-1],[-1,-2],[-2,1]],counterclockwise:[[2,-1],[-1,-2],[-2,1],[1,2]]}]},s.iMinoShapes=[[[-1,0],[0,0],[1,0],[2,0]],[[1,1],[1,0],[1,-1],[1,-2]],[[-1,-1],[0,-1],[1,-1],[2,-1]],[[0,1],[0,0],[0,-1],[0,-2]]]},298:(i,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Turn=void 0;const e=s(717);class o extends e.Bag{constructor(i){super(),this.GM=i}nextTurn(){if(this.GM.fill(this.GM.currentMino.myPosition,this.GM.currentMino.minoType),this.GM.currentMino.locked=!0,!this.GM.currentMino.myPosition.some((i=>i[1]<20)))return this.GM.gameover(),!1;let i=0;for(let t=0;t<this.GM.board.length;t++)if(!this.GM.board[t].some((i=>""===i))){i++;const t=[];for(let i=0;i<this.GM.width;i++)t.push("");this.GM.board.push(t)}this.GM.board=this.GM.board.filter((i=>i.some((i=>""===i))));let t=0,s=0,e=!1;if(this.GM.currentMino.tspin){if(!this.GM.currentMino.tspinMini)switch(i){case 0:t+=this.GM.scoreList.tspin;break;case 1:t+=this.GM.scoreList.tspinSingle,s=2;break;case 2:t+=this.GM.scoreList.tspinDouble,s=4;break;case 3:t+=this.GM.scoreList.tspinTriple,s=6}}else switch(i){case 1:t+=this.GM.scoreList.single;break;case 2:t+=this.GM.scoreList.double,s=1;break;case 3:t+=this.GM.scoreList.triple,s=2;break;case 4:t+=this.GM.scoreList.tetris,s=4}const o=this.GM.ren*this.GM.scoreList.renDefault;this.GM.scoreList.renMax<o?t+=this.GM.scoreList.renMax:t+=o;for(let i=0;i<this.GM.ren;i++)10<i?s+=5:7<i?s+=4:5<i?s+=3:3<i?s+=2:1<i&&(s+=1);if(4<=i||this.GM.currentMino.tspin?(this.GM.backToBack&&(t*=1.5,s+=1),this.GM.backToBack=!0):this.GM.backToBack=!1,!this.GM.board.some((i=>""!==i.join("")))){switch(i){case 1:t+=this.GM.scoreList.perfectClearSingle;break;case 2:t+=this.GM.scoreList.perfectClearDouble;break;case 3:t+=this.GM.scoreList.perfectClearTriple;break;case 4:t+=this.GM.scoreList.perfectClearTetris}e=!0,s=10}for(this.GM.currentMino.tspinMini&&(t+=100);0<s&&0<this.GM.damageAmountArray.length;)this.GM.damageAmountArray[0]-=s,this.GM.damageAmountArray[0]<=0?(s=-this.GM.damageAmountArray[0],this.GM.damageAmountArray.shift()):s=0;for(;0<this.GM.damageAmountArray.length;){const i=this.GM.damageAmountArray.shift();if("number"==typeof i){const t=Math.floor(10*Math.random());for(let s=0;s<i;s++){const i=[];for(let t=0;t<this.GM.width;t++)i.push("d");i[t]="",this.GM.board.unshift(i),this.GM.board.pop()}}}switch(0<i?this.GM.ren++:this.GM.ren=0,i){case 1:this.GM.control.waitFrames=35;break;case 2:case 3:this.GM.control.waitFrames=40;break;case 4:this.GM.control.waitFrames=45}e&&(this.GM.control.waitFrames=1);const n=this.GM.createMino(this.shiftNext());return this.GM.findOverlapingBlocks(n.myPosition)||""!==this.GM.board[39].join("")?(this.GM.gameover(),!1):(this.GM.changeCurrentMino(n),!0)}}t.Turn=o}},t={};function s(e){var o=t[e];if(void 0!==o)return o.exports;var n=t[e]={exports:{}};return i[e](n,n.exports,s),n.exports}(()=>{var i;const t=new(s(70).Gamemaster);t.start();const e=null!==(i=document.getElementById("game"))&&void 0!==i?i:document.body;document.addEventListener("keydown",(i=>{if(!i.repeat)switch(i.key){case"ArrowUp":t.control.rotateClockwise();break;case"ArrowRight":t.control.rightKeyDown();break;case"ArrowDown":t.control.downKeyDown();break;case"ArrowLeft":t.control.leftKeyDown();break;case"c":t.control.holdKey();break;case"z":t.control.rotateCounterclockwise();break;case" ":t.control.harddropKey()}})),document.addEventListener("keyup",(i=>{if(!i.repeat)switch(i.key){case"ArrowRight":t.control.rightKeyUp();break;case"ArrowDown":t.control.downKeyUp();break;case"ArrowLeft":t.control.leftKeyUp()}}));let o=0,n=0;!function i(){0===o&&setTimeout((()=>{n=o,o=0}),1e3),o++;const s=JSON.parse(JSON.stringify(t.board));t.fill(t.currentMino.getAbsoluteCoordinates(t.currentMino.x,t.currentMino.y),t.currentMino.minoType);const r=JSON.stringify(t.board.slice(0,21).reverse());t.board=s,e.innerText=`FPS: ${n}\nboard:\n${r.replace(/],/g,"]\n").replace(/""/g,'" "').replace(/("|,|((?<=\[)\[)|(](?=])))/g,"")}\nnext: ${t.turn.nextMinos}\nhold: ${t.holdMino}\nscore: ${t.score}`,requestAnimationFrame(i)}()})()})();